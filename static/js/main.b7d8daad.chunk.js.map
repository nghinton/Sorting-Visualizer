{"version":3,"sources":["SortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","low","high","pi","pivot","swapValues","partition","getHeapSortAnimations","heapify","heapSortHelper","index","largest","left","right","getBubbleSortAnimations","bubbleSortHelper","x","y","temp","HEIGHT_OF_ARRAY_BARS","$","window","innerHeight","WIDTH_OF_ARRAY_BARS","innerWidth","SortingVisualizer","props","state","sorting","algorithm","speed","default","colors","this","resetArray","value","setState","buttons","document","getElementsByTagName","style","backgroundColor","randomIntFromInterval","NUMBER_OF_ARRAY_BARS","console","log","mergeSort","quickSort","heapSort","bubbleSort","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","height","oldBarOneHeight","oldBarTwoHeight","type","className","disabled","onClick","shuffleArray","setSlowSpeed","setAverageSpeed","setFastSpeed","setRidiculousSpeed","setMergeSort","setQuickSort","setHeapSort","setBubbleSort","sortArray","map","idx","key","width","React","Component","min","max","random","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b7d8daad.chunk.js","sourcesContent":["/*\r\n * Nathan Hinton\r\n * 7/22/2020\r\n * \r\n * Purpose -\r\n *    - Algorithms that sort arrays of integers\r\n *    - All will return an animation array which will specify indexes of the \r\n *      array-bars div to color or swap heights\r\n * \r\n */\r\n\r\n\r\n\r\n\r\n/*\r\n * ================= Merge Sort ================================\r\n */\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n/*\r\n * ================= Quick Sort ================================\r\n */\r\n\r\nexport function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    quickSortHelper(array, 0, array.length - 1, animations);\r\n    return animations;\r\n  }\r\n\r\n  function quickSortHelper(array, low, high, animations) {\r\n    if (low < high) {\r\n      // Do partition function\r\n      let pi = partition(array, low, high, animations);\r\n\r\n      // Recursively sort each half\r\n      quickSortHelper(array, low, pi - 1, animations);\r\n      quickSortHelper(array, pi + 1, high, animations);\r\n    }\r\n    else return;\r\n  }\r\n\r\n  function partition(array, low, high, animations) {\r\n    // Choose last element as pivot (Element to be placed at right position)\r\n    let pivot = array[high];  \r\n \r\n    let i = (low - 1)  // Index of smaller element\r\n\r\n    // If current element is smaller than the pivot swap values\r\n    for (let j = low; j <= high - 1; j++) {\r\n      \r\n      if (array[j] < pivot) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, high, 0, 0, 0]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, high, 0, 0, 1]); \r\n        // increment index of smaller element\r\n        i++;    \r\n        // Push the indexes to swap to animations and swap the values\r\n        animations.push([i, j, array[i], array[j], 2])\r\n        swapValues(array, i, j);\r\n      }\r\n    }\r\n    // Push the indexes to swap to animations and swap the values\r\n    animations.push([i + 1, high, array[i+1], array[high], 2])\r\n    swapValues(array, i + 1, high);\r\n    return (i + 1);\r\n  }\r\n\r\n/*\r\n * ================= Heap Sort ================================\r\n */\r\n\r\nexport function getHeapSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  heapSortHelper(array, array.length, animations);\r\n  return animations;\r\n}\r\n\r\n  function heapSortHelper(array, length, animations) {\r\n    // Build heap (rearrange array) \r\n    for (let i = Math.floor(length / 2) - 1; i >= 0; i--) {\r\n      heapify(array, length, i, animations); \r\n    }\r\n\r\n    // One by one extract an element from heap \r\n    for (let i = length - 1; i > 0; i--) { \r\n      // Move current root to end \r\n      // Push the indexes to swap to animations\r\n      animations.push([0, i, array[0], array[i], 2])\r\n      swapValues(array, 0, i); \r\n    \r\n      // call max heapify on the reduced heap \r\n      heapify(array, i, 0, animations); \r\n    } \r\n\r\n    return;\r\n  }\r\n\r\n  function heapify(array, length, index, animations) {\r\n    var largest = index;        // Initialize largest as root \r\n    var left = 2 * index + 1;   // left = 2*i + 1 \r\n    var right = 2 * index + 2;  // right = 2*i + 2 \r\n  \r\n    // If left child is larger than root \r\n    if (left < length && array[left] > array[largest]) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([left, largest, 0, 0, 0]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([left, largest, 0, 0, 1]);\r\n      // Assign new largest\r\n      largest = left; \r\n    }\r\n  \r\n    // If right child is larger than largest so far \r\n    if (right < length && array[right] > array[largest]) { \r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([right, largest, 0, 0, 0]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([right, largest, 0, 0, 1]);\r\n      // Assign new largest\r\n      largest = right; \r\n    }\r\n  \r\n    // If largest is not root \r\n    if (largest !== index) { \r\n      // Push the indexes to swap to animations and swap the values\r\n      animations.push([index, largest, array[index], array[largest], 2])\r\n      swapValues(array, index, largest); \r\n  \r\n      // Recursively heapify the affected sub-tree \r\n      heapify(array, length, largest, animations); \r\n    } \r\n  }\r\n\r\n  /*\r\n * ================= Heap Sort ================================\r\n */\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  bubbleSortHelper(array, array.length, animations);\r\n  return animations;\r\n}\r\n\r\n  function bubbleSortHelper(array, length, animations) {\r\n    var i, j;  \r\n    for (i = 0; i < length-1; i++) {\r\n      // Last i elements are already in place  \r\n      for (j = 0; j < length-1-i; j++) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, j + 1, 0, 0, 0]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, j + 1, 0, 0, 1]);\r\n          if (array[j] > array[j+1]) {\r\n            // Push the indexes to swap to animations and swap the values\r\n            animations.push([j, j + 1, array[j], array[j + 1], 2])\r\n            swapValues(array, j, j+1);\r\n          }\r\n      } \r\n    }\r\n  }\r\n\r\n// Helper function for bubble sort, quick sort and heap sort\r\nfunction swapValues(array, x, y) {\r\n  var temp = array[x];\r\n  array[x] = array[y];\r\n  array[y] = temp;\r\n}","import React from 'react';\r\nimport $ from 'jquery';\r\nimport {getMergeSortAnimations} from '../SortingAlgorithms/sortingAlgorithms.js';\r\nimport {getQuickSortAnimations} from '../SortingAlgorithms/sortingAlgorithms.js';\r\nimport {getHeapSortAnimations} from '../SortingAlgorithms/sortingAlgorithms.js';\r\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'white';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 150;\r\n\r\n// Change this value for the height of the bars in the array\r\nconst HEIGHT_OF_ARRAY_BARS = Math.floor($(window).innerHeight() * 0.85);\r\n\r\n// Change this value for the width of the bars in the array\r\nconst WIDTH_OF_ARRAY_BARS = Math.floor($(window).innerWidth() / (NUMBER_OF_ARRAY_BARS * 1.25));\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      sorting: false,\r\n      algorithm: 0,         // 0 = Merge Sort\r\n                            // 1 = Heap Sort\r\n                            // 2 = Quick Sort\r\n                            // 3 = Bubble Sort\r\n      speed: 5,             // 10 = Slow\r\n                            // 5 = Average\r\n                            // 1 = Fast\r\n                            // 0.5 = Ridiculous\r\n      default: '#333',\r\n      colors: [\r\n        \"#4caf50\",          // Green\r\n        \"#008cba\",          // Blue\r\n        \"#f44336\",          // Red\r\n        \"#ff4fa2\"           // Pink\r\n      ],\r\n      array: []\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      var value = Math.floor((HEIGHT_OF_ARRAY_BARS - 5) / NUMBER_OF_ARRAY_BARS) * i + 5;\r\n      array.push(value);\r\n    }\r\n    this.setState({array: array});\r\n  }\r\n\r\n  setMergeSort() {\r\n    this.setState({ algorithm: 0});\r\n    const buttons = document.getElementsByTagName('button');\r\n    buttons[5].style.backgroundColor = this.state.colors[0];\r\n    buttons[6].style.backgroundColor = this.state.default;\r\n    buttons[7].style.backgroundColor = this.state.default;\r\n    buttons[8].style.backgroundColor = this.state.default;\r\n  }\r\n\r\n  setQuickSort() {\r\n    this.setState({ algorithm: 1});\r\n    const buttons = document.getElementsByTagName('button');\r\n    buttons[5].style.backgroundColor = this.state.default;\r\n    buttons[6].style.backgroundColor = this.state.colors[1];\r\n    buttons[7].style.backgroundColor = this.state.default;\r\n    buttons[8].style.backgroundColor = this.state.default;\r\n  }\r\n\r\n  setHeapSort() {\r\n    this.setState({ algorithm: 2});\r\n    const buttons = document.getElementsByTagName('button');\r\n    buttons[5].style.backgroundColor = this.state.default;\r\n    buttons[6].style.backgroundColor = this.state.default;\r\n    buttons[7].style.backgroundColor = this.state.colors[2];\r\n    buttons[8].style.backgroundColor = this.state.default;\r\n  }\r\n\r\n  setBubbleSort() {\r\n    this.setState({ algorithm: 3});\r\n    const buttons = document.getElementsByTagName('button');\r\n    buttons[5].style.backgroundColor = this.state.default;\r\n    buttons[6].style.backgroundColor = this.state.default;\r\n    buttons[7].style.backgroundColor = this.state.default;\r\n    buttons[8].style.backgroundColor = this.state.colors[3];\r\n  }\r\n\r\n  setSlowSpeed() {\r\n    this.setState({ speed: 10});\r\n    const buttons = document.getElementsByTagName('button');\r\n    buttons[1].style.backgroundColor = this.state.colors[0];\r\n    buttons[2].style.backgroundColor = this.state.default;\r\n    buttons[3].style.backgroundColor = this.state.default;\r\n    buttons[4].style.backgroundColor = this.state.default;\r\n  }\r\n\r\n  setAverageSpeed() {\r\n    this.setState({ speed: 5});\r\n    const buttons = document.getElementsByTagName('button');\r\n    buttons[1].style.backgroundColor = this.state.default;\r\n    buttons[2].style.backgroundColor = this.state.colors[1];\r\n    buttons[3].style.backgroundColor = this.state.default;\r\n    buttons[4].style.backgroundColor = this.state.default;\r\n  }\r\n\r\n  setFastSpeed() {\r\n    this.setState({ speed: 1});\r\n    const buttons = document.getElementsByTagName('button');\r\n    buttons[1].style.backgroundColor = this.state.default;\r\n    buttons[2].style.backgroundColor = this.state.default;\r\n    buttons[3].style.backgroundColor = this.state.colors[2];\r\n    buttons[4].style.backgroundColor = this.state.default;\r\n  }\r\n\r\n  setRidiculousSpeed() {\r\n    this.setState({ speed: 0.5});\r\n    const buttons = document.getElementsByTagName('button');\r\n    buttons[1].style.backgroundColor = this.state.default;\r\n    buttons[2].style.backgroundColor = this.state.default;\r\n    buttons[3].style.backgroundColor = this.state.default;\r\n    buttons[4].style.backgroundColor = this.state.colors[3];\r\n  }\r\n\r\n  shuffleArray() {\r\n    const array = this.state.array;\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; ++i) {\r\n      var x = randomIntFromInterval(0, NUMBER_OF_ARRAY_BARS-1);\r\n      var y = randomIntFromInterval(0, NUMBER_OF_ARRAY_BARS-1);\r\n      this.swapValues(array, x, y)\r\n    }\r\n    this.setState({array});\r\n    console.log(this.state.array);\r\n  }\r\n\r\n  swapValues(array, x, y) {\r\n    let temp = array[x];\r\n    array[x] = array[y];\r\n    array[y] = temp;\r\n  }\r\n\r\n  sortArray() {\r\n    const algorithm = this.state.algorithm;\r\n    switch (algorithm) {\r\n      case(0) :\r\n        this.setState({sorting : true}, () => this.mergeSort());\r\n        break;\r\n      case(1) :\r\n        this.setState({sorting : true}, () => this.quickSort());\r\n        break;\r\n      case(2) :\r\n        this.setState({sorting : true}, () => this.heapSort());\r\n        break;\r\n      case(3) :\r\n        this.setState({sorting : true}, () => this.bubbleSort());\r\n        break;\r\n      default :\r\n        this.setState({sorting : true}, () => this.mergeSort());\r\n        break;\r\n    }\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * this.state.speed);\r\n      }\r\n    }\r\n    // Enable the sort and shuffle buttons when the animations are done\r\n    setTimeout(() => {\r\n      this.setState({sorting : false});\r\n    }, animations.length * this.state.speed)\r\n  }\r\n\r\n  quickSort() {\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const [barOneIdx, barTwoIdx, oldBarOneHeight, oldBarTwoHeight, type] = animations[i];\r\n      if (type === 0) {\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = SECONDARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.speed);\r\n      } else if (type === 1) {\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.speed);\r\n      } else {\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${oldBarTwoHeight}px`;\r\n          barTwoStyle.height = `${oldBarOneHeight}px`;\r\n        }, i * this.state.speed);\r\n      }\r\n    }\r\n    // Enable the sort and shuffle buttons when the animations are done\r\n    setTimeout(() => {\r\n      this.setState({sorting : false});\r\n    }, animations.length * this.state.speed)\r\n  }\r\n\r\n  heapSort() {\r\n    const animations = getHeapSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const [barOneIdx, barTwoIdx, oldBarOneHeight, oldBarTwoHeight, type] = animations[i];\r\n      if (type === 0) {\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = SECONDARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.speed);\r\n      } else if (type === 1) {\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.speed);\r\n      } else {\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${oldBarTwoHeight}px`;\r\n          barTwoStyle.height = `${oldBarOneHeight}px`;\r\n        }, i * this.state.speed);\r\n      }\r\n    }\r\n    // Enable the sort and shuffle buttons when the animations are done\r\n    setTimeout(() => {\r\n      this.setState({sorting : false});\r\n    }, animations.length * this.state.speed)\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const [barOneIdx, barTwoIdx, oldBarOneHeight, oldBarTwoHeight, type] = animations[i];\r\n      if (type === 0) {\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = SECONDARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.speed);\r\n      } else if (type === 1) {\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.speed);\r\n      } else {\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${oldBarTwoHeight}px`;\r\n          barTwoStyle.height = `${oldBarOneHeight}px`;\r\n        }, i * this.state.speed);\r\n      }\r\n    }\r\n\r\n    // Enable the sort and shuffle buttons when the animations are done\r\n    setTimeout(() => {\r\n      this.setState({sorting : false});\r\n    }, animations.length * this.state.speed)\r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n    const {sorting} = this.state;\r\n\r\n    return (\r\n      <div className=\"app-container\">\r\n\r\n        <div className=\"navbar\">\r\n          <div className=\"title\">\r\n            Sorting Visualizer\r\n          </div>\r\n          <div className=\"shuffle\">\r\n            <p>Shuffle the array!</p>\r\n            <button disabled={sorting ? true : false} onClick={() => this.shuffleArray()}>Shuffle Array</button>\r\n          </div>\r\n          <div className=\"speed\">\r\n            <p>Choose your speed!</p>\r\n            <div className=\"speedButtons\">\r\n              <button style={{ backgroundColor: this.state.colors[0]\r\n                            }} className=\"button1\" onClick={() => this.setSlowSpeed()}>Slow</button>\r\n              <button style={{ backgroundColor: this.state.default\r\n                            }} className=\"button2\" onClick={() => this.setAverageSpeed()}>Average</button>\r\n              <button style={{ backgroundColor: this.state.default\r\n                            }} className=\"button3\" onClick={() => this.setFastSpeed()}>Fast</button>\r\n              <button style={{ backgroundColor: this.state.default\r\n                            }} className=\"button4\" onClick={() => this.setRidiculousSpeed()}>Ridiculous</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"algorithms\">\r\n            <p>Choose your algorithm!</p>\r\n            <div className=\"sortingButtons\">\r\n              <button style={{ backgroundColor: this.state.colors[0]\r\n                            }} className=\"button1\" onClick={() => this.setMergeSort()}>Merge Sort</button>\r\n              <button style={{ backgroundColor: this.state.default\r\n                            }} className=\"button2\" onClick={() => this.setQuickSort()}>Quick Sort</button>\r\n              <button style={{ backgroundColor: this.state.default\r\n                            }} className=\"button3\" onClick={() => this.setHeapSort()}>Heap Sort</button>\r\n              <button style={{ backgroundColor: this.state.default\r\n                            }} className=\"button4\" onClick={() => this.setBubbleSort()}>Bubble Sort</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"sort\">\r\n            <p>Sort the array!</p>\r\n            <button disabled={sorting ? true : false} onClick={() => this.sortArray()}>Sort Array</button>\r\n          </div>\r\n          <div className=\"title\">\r\n            Nathan Hinton, 2020\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                width: WIDTH_OF_ARRAY_BARS,\r\n                height: `${value}px`,\r\n              }}></div>\r\n          ))}\r\n        </div>\r\n\r\n      </div>\r\n      \r\n    );\r\n\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}